{"version":3,"sources":["Vertex.js","ClickAction.js","Edge.js","EdgeContainer.js","InfoBox.js","Field.js","SideBarButton.js","SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Vertex","props","vertex","onMouseDown","className","position","x","y","color","style","top","left","background","ClickAction","SELECT","ADD_VERTEX","ADD_EDGE","DELETE","COLOR","Edge","d","edge","offsetLeft","multiplicity","endpoints","start","end","isLoop","x1","y1","x2","y2","radius","far","Math","sqrt","magnitude","pow","vx","vy","distance","ceil","direction","x3","y3","fill","stroke","strokeWidth","EdgeContainer","edges","useState","setOffsetLeft","svg","useRef","useEffect","current","parentElement","seenEndpoints","ref","pointerEvents","map","index","i","length","event","push","InfoBox","numVertices","numEdges","numComponents","graphTypes","Field","clickAction","dragging","setDragging","startEdge","setStartEdge","vertices","setVertices","setEdges","root","edgesWithEndpoint","filter","includes","onVertexMouseDown","startDrag","startAddEdge","edgesToRemove","edgeCopy","vertexCopy","splice","removeVertex","copy","colorVertex","newEdge","addEdge","components","verticesSeen","Array","dfs","flat","otherVertex","adjacentVertices","newIndex","indexOf","newVertex","addVertex","clientX","clientY","onMouseMove","preventDefault","newPosition","moveVertex","onMouseUp","removeEdge","colorEdge","SideBarButton","icon","name","onClickAction","setClickAction","Button","variant","onClick","active","SideBar","setColor","buttonData","faMousePointer","faCircle","faProjectDiagram","faTrash","faPaintBrush","element","makeButton","onChange","hex","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ec17542.chunk.js","sourcesContent":["import React from \"react\";\nimport './Vertex.css'\n\n\nfunction Vertex(props) {\n    const {vertex, onMouseDown, className} = props;\n    const [x, y] = vertex.position;\n    const color = vertex.color;\n\n    return (\n        <div\n            className={`Vertex ${className}`}\n            style={{top: `${y}px`, left: `${x}px`, background: color}}\n            onMouseDown={onMouseDown}\n        >\n\n        </div>\n    );\n}\n\nexport default Vertex;","const ClickAction = {\n    SELECT: \"Select\",\n    ADD_VERTEX: \"AddVertex\",\n    ADD_EDGE: \"AddEdge\",\n    DELETE: \"Delete\",\n    COLOR: \"Color\"\n}\n\nexport default ClickAction;","import React from \"react\";\nimport './Edge.css'\n\nfunction Edge(props) {\n    const {edge, onMouseDown, offsetLeft, multiplicity} = props\n    const [start, end] = edge.endpoints\n    const isLoop = start === end;\n    const [x1, y1] = [start.position[0] - offsetLeft, start.position[1]]\n    const [x2, y2] = [end.position[0] - offsetLeft, end.position[1]]\n    const color = edge.color\n\n\n    let d;\n    if (isLoop) {\n        const radius = 35 + (multiplicity * 10);\n        const far = Math.sqrt(2) * radius\n        d = `M ${x1} ${y1}\n             a ${radius},${radius} 0 0 1 ${-far},${-far}\n             a ${radius},${radius} 0 1 1 ${far},${far}`\n    } else {\n        const magnitude = Math.sqrt(Math.pow(x1-x2, 2) + Math.pow(y1-y2, 2))\n        const [vx, vy] = [(y2-y1) / magnitude, -(x2-x1) / magnitude]\n        const distance = 25 * Math.ceil(multiplicity / 2)\n        const direction = Math.pow(-1, multiplicity) * (vx >= vy ? (vx === vy ? (x1 > x2 ? 1 : -1) : 1) : -1)\n        const [midX, midY] = [(x1 + x2)/2, (y1 + y2)/2]\n        const [x3, y3] = [midX + (distance * direction * vx), midY + (distance * direction * vy)]\n\n        d = `M ${x1} ${y1}\n             Q ${x3} ${y3} ${x2} ${y2}`\n    }\n\n    return (\n        <path\n            onMouseDown={onMouseDown}\n            className='Edge-Path'\n            fill='transparent'\n            stroke={color}\n            strokeWidth='6'\n            d={d}\n        />\n    )\n\n\n}\n\nexport default Edge;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport Edge from \"./Edge\";\nimport './Edge.css'\n\nfunction EdgeContainer(props) {\n    const {edges, onMouseDown} = props\n    const [offsetLeft, setOffsetLeft] = useState(null);\n    const svg = useRef();\n\n    useEffect(() => {\n        setOffsetLeft(svg.current.parentElement.offsetLeft)\n    }, []);\n\n\n    const seenEndpoints = []\n    return (\n        <svg className='Edge-Container' ref={svg} pointerEvents='visibleStroke'>\n            {edges.map((edge, index) => {\n                let multiplicity = 0;\n                for (let i = 0; i < seenEndpoints.length; i++) {\n                    if ((edge.endpoints[0] === seenEndpoints[i].endpoints[0]\n                        && edge.endpoints[1] === seenEndpoints[i].endpoints[1])\n                        || (edge.endpoints[0] === seenEndpoints[i].endpoints[1]\n                            && edge.endpoints[1] === seenEndpoints[i].endpoints[0])) {\n                        multiplicity = seenEndpoints[i].multiplicity;\n                        seenEndpoints[i].multiplicity++;\n                        return (\n                            <Edge\n                                edge={edge}\n                                key={index}\n                                onMouseDown={(event) => onMouseDown(event, index)}\n                                offsetLeft={offsetLeft}\n                                multiplicity={multiplicity}\n                            />\n                        )\n                    }\n                }\n                seenEndpoints.push({endpoints: edge.endpoints, multiplicity: 1})\n                return (\n                    <Edge\n                        edge={edge}\n                        key={index}\n                        onMouseDown={(event) => onMouseDown(event, index)}\n                        offsetLeft={offsetLeft}\n                        multiplicity={multiplicity}\n                    />\n                )\n            })}\n        </svg>\n    )\n}\n\nexport default EdgeContainer;","import React from \"react\";\nimport './InfoBox.css'\n\nfunction InfoBox(props) {\n    const {numVertices, numEdges, numComponents, graphTypes} = props\n    return (\n      <div className='InfoBox'>\n          <div>Vertices: <strong>{numVertices}</strong></div>\n          <div>Edges: <strong>{numEdges}</strong></div>\n          <div>Components: <strong>{numComponents}</strong></div>\n      </div>\n    );\n}\n\nexport default InfoBox;","import React, {useRef, useState} from 'react';\nimport './Field.css';\n\nimport Vertex from \"./Vertex\"\nimport ClickAction from \"./ClickAction\";\nimport EdgeContainer from \"./EdgeContainer\";\nimport InfoBox from \"./InfoBox\";\n\nfunction Field(props) {\n    const {clickAction, color} = props\n    const [dragging, setDragging] = useState(null);\n    const [startEdge, setStartEdge] = useState(null);\n    const [vertices, setVertices] = useState([]);\n    const [edges, setEdges] = useState([])\n    const root = useRef()\n\n    const edgesWithEndpoint = (vertex) => {\n        return edges.filter((edge) => edge.endpoints.includes(vertex))\n    }\n\n    const adjacentVertices = (vertex) => {\n        return edgesWithEndpoint(vertex).map((edge) => {\n            return edge.endpoints\n        }).flat().filter((otherVertex) => otherVertex !== vertex)\n    }\n\n    const addVertex = (newVertex) => {\n        const copy = [...vertices];\n        copy.push(newVertex)\n        setVertices(copy);\n    }\n\n    const removeVertex = (index) => {\n        const vertex = vertices[index];\n        const edgesToRemove = edgesWithEndpoint(vertex);\n        const edgeCopy = [...edges].filter((edge) => !edgesToRemove.includes(edge))\n        setEdges(edgeCopy)\n        const vertexCopy = [...vertices];\n        vertexCopy.splice(index, 1);\n        setVertices(vertexCopy);\n    }\n\n    const colorVertex = (index, color) => {\n        const copy = [...vertices];\n        copy[index].color = color;\n        setVertices(copy);\n    }\n\n    const addEdge = (newEdge) => {\n        const copy = [...edges];\n        copy.push(newEdge)\n        setEdges(copy);\n    }\n\n    const removeEdge = (index) => {\n        const copy = [...edges];\n        copy.splice(index, 1)\n        setEdges(copy);\n    }\n\n    const colorEdge = (index, color) => {\n        const copy = [...edges];\n        copy[index].color = color;\n        setEdges(copy);\n    }\n\n    const onMouseDown = (event) => {\n        if (clickAction === ClickAction.ADD_VERTEX) {\n            const x = event.clientX;\n            const y = event.clientY;\n            addVertex({position: [x, y], color: color});\n        }\n    }\n\n    const onVertexMouseDown = (event, index) => {\n        if (clickAction === ClickAction.SELECT) {\n            startDrag(index)\n        } else if (clickAction === ClickAction.ADD_EDGE) {\n            startAddEdge(index)\n        } else if (clickAction === ClickAction.DELETE) {\n            removeVertex(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorVertex(index, color)\n        }\n    }\n\n    const onEdgeMouseDown = (event, index) => {\n        if (clickAction === ClickAction.DELETE) {\n            removeEdge(index)\n        } else if (clickAction === ClickAction.COLOR) {\n            colorEdge(index, color)\n        }\n    }\n\n    const moveVertex = (index, newPosition) => {\n        const copy = [...vertices]\n        copy[index].position = newPosition\n        setVertices(copy);\n    }\n\n    const startDrag = (index) => {\n        setDragging(index)\n    }\n\n    const stopDrag = (event) => {\n        event.preventDefault()\n        setDragging(null)\n    }\n\n    const startAddEdge = (index) => {\n        if (startEdge === null) {\n            setStartEdge(index)\n        } else {\n            addEdge({endpoints: [vertices[startEdge], vertices[index]], color: color})\n            setStartEdge(null)\n        }\n    }\n\n    const onMouseMove = (event) => {\n        if (dragging !== null) {\n            event.preventDefault()\n            moveVertex(dragging, [event.clientX, event.clientY])\n        }\n    }\n\n    const numVertices = () => {\n        return vertices.length\n    }\n\n    const numEdges = () => {\n        return edges.length\n    }\n\n    const numComponents = () => {\n        let components = 0;\n        const verticesSeen = new Array(vertices.length).fill(false);\n        const dfs = (index) => {\n            verticesSeen[index] = true\n            for (const vertex of adjacentVertices(vertices[index])) {\n                const newIndex = vertices.indexOf(vertex)\n                if (!verticesSeen[newIndex]){\n                    dfs(newIndex)\n                }\n            }\n        }\n        for (let i = 0; i < vertices.length; i++) {\n            if (verticesSeen[i]) {\n                continue\n            }\n            dfs(i)\n            components++\n        }\n        return components\n    }\n\n    const isSimpleGraph = () => {\n        const endpointsSeen = []\n        for (const edge of edges) {\n            if (edge.endpoints in endpointsSeen) {\n                return false\n            } else if (edge.endpoints[0] === edge.endpoints[1]) {\n                return false\n            }\n            endpointsSeen.push(edge)\n        }\n        return true\n    }\n\n    const isNullGraph = () => {\n        return vertices.length === 0\n    }\n\n    const isTreeGraph = () => {\n        return isForestGraph() && numComponents() === 1\n    }\n\n    const isForestGraph = () => {\n        return numVertices() - numEdges() === numComponents() && isSimpleGraph()\n    }\n\n    return (\n        <div\n            className=\"Field\"\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={stopDrag}\n            ref={root}\n        >\n            <InfoBox\n                numVertices={numVertices()}\n                numEdges={numEdges()}\n                numComponents={numComponents()}\n            />\n            {vertices.map((vertex, index) => {\n                return (\n                    <Vertex\n                        className={index === startEdge ? 'Vertex-Selected' : ''}\n                        vertex={vertex}\n                        key={index}\n                        onMouseDown={(event) => onVertexMouseDown(event, index)}\n                    />\n                )\n            })}\n            <EdgeContainer\n                edges={edges}\n                onMouseDown={onEdgeMouseDown}\n            />\n        </div>\n    );\n}\n\nexport default Field;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport './SideBarButton.css'\n\nfunction SideBarButton(props) {\n    const {icon, name, clickAction, onClickAction, setClickAction} = props\n    return (\n        <Button\n            className=\"SideBarButton\"\n            variant='primary'\n            onClick={() => setClickAction(onClickAction)}\n            active={clickAction === onClickAction}\n        >\n            {icon}\n            <div className={'SideBarButton-Name'}>{name}</div>\n        </Button>\n    )\n};\n\nexport default SideBarButton;","import React from 'react';\nimport './SideBar.css'\nimport SideBarButton from \"./SideBarButton\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faCircle,\n    faLongArrowAltRight,\n    faMousePointer, faPaintBrush,\n    faProjectDiagram,\n    faTrash\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ClickAction from \"./ClickAction\";\nimport {BlockPicker} from \"react-color\";\n\nfunction SideBar(props) {\n    const {clickAction, setClickAction, color, setColor} = props\n\n    const makeButton = ({icon, name, onClickAction}) => {\n        return (\n            <SideBarButton\n                icon={icon}\n                name={name}\n                clickAction={clickAction}\n                onClickAction={onClickAction}\n                setClickAction={setClickAction}\n                key={onClickAction}\n            />\n        )\n    }\n\n    const buttonData = [\n        {icon: <FontAwesomeIcon icon={faMousePointer}/>, name: 'Select', onClickAction: ClickAction.SELECT},\n        {icon: <FontAwesomeIcon icon={faCircle}/>, name: 'New Vertex', onClickAction: ClickAction.ADD_VERTEX},\n        {icon: <FontAwesomeIcon icon={faProjectDiagram}/>, name: 'New Edge', onClickAction: ClickAction.ADD_EDGE},\n        {icon: <FontAwesomeIcon icon={faTrash}/>, name: 'Delete', onClickAction: ClickAction.DELETE},\n        {icon: <FontAwesomeIcon icon={faPaintBrush}/>, name: 'Color', onClickAction: ClickAction.COLOR}\n    ]\n\n    return (\n        <div className=\"SideBar\">\n            {buttonData.map(element => makeButton(element))}\n            <BlockPicker\n                color={color}\n                onChange={(color, event) => setColor(color.hex)}\n                width='100%'/>\n        </div>\n    );\n}\n\nexport default SideBar;","import React, {useState} from 'react';\nimport './App.css';\nimport Field from './Field';\nimport SideBar from \"./SideBar\";\nimport ClickAction from \"./ClickAction\";\n\nfunction App() {\n    const [clickAction, setClickAction] = useState(ClickAction.SELECT)\n    const [color, setColor] = useState('#000000');\n\n    return (\n        <div className='App'>\n            <SideBar\n                clickAction={clickAction}\n                setClickAction={setClickAction}\n                color={color}\n                setColor={setColor}\n            />\n            <Field\n                clickAction={clickAction}\n                color={color}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}